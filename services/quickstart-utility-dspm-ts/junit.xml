<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="55" failures="0" errors="0" time="2.506">
  <testsuite name="Testing backupFilesAction..." errors="0" failures="0" skipped="0" timestamp="2024-07-17T20:52:25" time="2.036" tests="5">
    <testcase classname="Testing backupFilesAction... should run and then log (all data sources)" name="Testing backupFilesAction... should run and then log (all data sources)" time="0.006">
    </testcase>
    <testcase classname="Testing backupFilesAction... should run and then log (some data sources)" name="Testing backupFilesAction... should run and then log (some data sources)" time="0.001">
    </testcase>
    <testcase classname="Testing backupFilesAction... should catch an error backing up files" name="Testing backupFilesAction... should catch an error backing up files" time="0.007">
    </testcase>
    <testcase classname="Testing printBigIdCasesAsJSON... should run and then log (all data sources)" name="Testing printBigIdCasesAsJSON... should run and then log (all data sources)" time="0.001">
    </testcase>
    <testcase classname="Testing printBigIdCasesAsJSON... should run and then log (select data sources)" name="Testing printBigIdCasesAsJSON... should run and then log (select data sources)" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Testing Action Switch..." errors="0" failures="0" skipped="0" timestamp="2024-07-17T20:52:25" time="2.064" tests="5">
    <testcase classname="Testing Action Switch... should execute &quot;Get DSPM Cases&quot; action" name="Testing Action Switch... should execute &quot;Get DSPM Cases&quot; action" time="0.003">
    </testcase>
    <testcase classname="Testing Action Switch... should execute &quot;Backup files (DSPM)&quot; action" name="Testing Action Switch... should execute &quot;Backup files (DSPM)&quot; action" time="0">
    </testcase>
    <testcase classname="Testing Action Switch... should trigger default branch" name="Testing Action Switch... should trigger default branch" time="0.001">
    </testcase>
    <testcase classname="Testing Action Switch... should catch known error" name="Testing Action Switch... should catch known error" time="0">
    </testcase>
    <testcase classname="Testing Action Switch... should catch unknown error" name="Testing Action Switch... should catch unknown error" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Testing getParamValue" errors="0" failures="0" skipped="0" timestamp="2024-07-17T20:52:25" time="2.095" tests="45">
    <testcase classname="Testing getParamValue valid action param should return string" name="Testing getParamValue valid action param should return string" time="0.005">
    </testcase>
    <testcase classname="Testing getParamValue invalid action param should return undefined" name="Testing getParamValue invalid action param should return undefined" time="0">
    </testcase>
    <testcase classname="Testing getParamValue valid global param should return string" name="Testing getParamValue valid global param should return string" time="0.001">
    </testcase>
    <testcase classname="Testing getParamValue invalid global param should return undefined" name="Testing getParamValue invalid global param should return undefined" time="0">
    </testcase>
    <testcase classname="Testing getStringParam valid action param should return string" name="Testing getStringParam valid action param should return string" time="0">
    </testcase>
    <testcase classname="Testing getStringParam invalid action param should return empty string" name="Testing getStringParam invalid action param should return empty string" time="0">
    </testcase>
    <testcase classname="Testing getStringParam valid global param should return string" name="Testing getStringParam valid global param should return string" time="0.001">
    </testcase>
    <testcase classname="Testing getStringParam invalid global param should return expty string" name="Testing getStringParam invalid global param should return expty string" time="0">
    </testcase>
    <testcase classname="Testing getStringActionParam Get Data Sources from action params should return s3-v2" name="Testing getStringActionParam Get Data Sources from action params should return s3-v2" time="0">
    </testcase>
    <testcase classname="Testing getStringActionParam Get invalid param from action params should return en empty string" name="Testing getStringActionParam Get invalid param from action params should return en empty string" time="0">
    </testcase>
    <testcase classname="Testing tokenizeStringList spam  ,   ham,   eggs,foo ,bar should return an array of strings with each item in the list" name="Testing tokenizeStringList spam  ,   ham,   eggs,foo ,bar should return an array of strings with each item in the list" time="0.001">
    </testcase>
    <testcase classname="Testing getAffectedObjects should return the affected objects when the response is successful" name="Testing getAffectedObjects should return the affected objects when the response is successful" time="0">
    </testcase>
    <testcase classname="Testing getAffectedObjects should throw an error when the status is not 200" name="Testing getAffectedObjects should throw an error when the status is not 200" time="0.005">
    </testcase>
    <testcase classname="Testing getAffectedObjects should throw an error when axios request fails" name="Testing getAffectedObjects should throw an error when axios request fails" time="0.001">
    </testcase>
    <testcase classname="Testing getBigIdCases testing sucessful response with data sources" name="Testing getBigIdCases testing sucessful response with data sources" time="0.001">
    </testcase>
    <testcase classname="Testing getBigIdCases testing sucessful response with ds in cache" name="Testing getBigIdCases testing sucessful response with ds in cache" time="0">
    </testcase>
    <testcase classname="Testing getBigIdCases testing sucessful response with no resourceProperties or authenticationProperties fields" name="Testing getBigIdCases testing sucessful response with no resourceProperties or authenticationProperties fields" time="0.001">
    </testcase>
    <testcase classname="Testing getBigIdCases should throw error when no affected objects" name="Testing getBigIdCases should throw error when no affected objects" time="0">
    </testcase>
    <testcase classname="Testing getBigIdCases should throw error when totalCount is 0" name="Testing getBigIdCases should throw error when totalCount is 0" time="0">
    </testcase>
    <testcase classname="Testing getBigIdCases failed executeHttpGet request should be caught and thrown" name="Testing getBigIdCases failed executeHttpGet request should be caught and thrown" time="0">
    </testcase>
    <testcase classname="Testing getBigIdCases non 200 response should throw an error" name="Testing getBigIdCases non 200 response should throw an error" time="0.001">
    </testcase>
    <testcase classname="Testing getCompliancePolicy testing with 200 response" name="Testing getCompliancePolicy testing with 200 response" time="0">
    </testcase>
    <testcase classname="Testing getCompliancePolicy testing with 200 response and invalid policy name" name="Testing getCompliancePolicy testing with 200 response and invalid policy name" time="0">
    </testcase>
    <testcase classname="Testing getCompliancePolicy testing with 401 response and invalid policy name" name="Testing getCompliancePolicy testing with 401 response and invalid policy name" time="0">
    </testcase>
    <testcase classname="Testing getCompliancePolicy should throw error with null policy" name="Testing getCompliancePolicy should throw error with null policy" time="0">
    </testcase>
    <testcase classname="Testing getDataSource testing with 200 response" name="Testing getDataSource testing with 200 response" time="0.001">
    </testcase>
    <testcase classname="Testing getDataSource testing with 400 error" name="Testing getDataSource testing with 400 error" time="0">
    </testcase>
    <testcase classname="Testing getDataSource testing with unknown error" name="Testing getDataSource testing with unknown error" time="0">
    </testcase>
    <testcase classname="Testing getDataSource should throw error if dataSource is null" name="Testing getDataSource should throw error if dataSource is null" time="0">
    </testcase>
    <testcase classname="Testing mapObjectToFile should map object to file" name="Testing mapObjectToFile should map object to file" time="0.001">
    </testcase>
    <testcase classname="Testing backupFilesInFakeAPI should contact API and return response" name="Testing backupFilesInFakeAPI should contact API and return response" time="0.003">
    </testcase>
    <testcase classname="Testing backupFilesInFakeAPI should catch and throw axios error" name="Testing backupFilesInFakeAPI should catch and throw axios error" time="0">
    </testcase>
    <testcase classname="Testing backupFilesInFakeAPI should catch and throw null error" name="Testing backupFilesInFakeAPI should catch and throw null error" time="0">
    </testcase>
    <testcase classname="Testing updateCaseStatusInBigId should return if status is 200" name="Testing updateCaseStatusInBigId should return if status is 200" time="0.001">
    </testcase>
    <testcase classname="Testing updateCaseStatusInBigId should err if status is not 200" name="Testing updateCaseStatusInBigId should err if status is not 200" time="0">
    </testcase>
    <testcase classname="Testing updateCaseStatusInBigId should catch and throw axios error" name="Testing updateCaseStatusInBigId should catch and throw axios error" time="0">
    </testcase>
    <testcase classname="Testing remediateCasesWithNoAffectedObjects should return 0 when there are affected objects on the case" name="Testing remediateCasesWithNoAffectedObjects should return 0 when there are affected objects on the case" time="0">
    </testcase>
    <testcase classname="Testing remediateCasesWithNoAffectedObjects should return 1 when there are no affected objects on the case" name="Testing remediateCasesWithNoAffectedObjects should return 1 when there are no affected objects on the case" time="0.001">
    </testcase>
    <testcase classname="Testing getTagIdsByNameAndValue should return a matching tag object if tag is found" name="Testing getTagIdsByNameAndValue should return a matching tag object if tag is found" time="0">
    </testcase>
    <testcase classname="Testing getTagIdsByNameAndValue should err if status is not 200" name="Testing getTagIdsByNameAndValue should err if status is not 200" time="0">
    </testcase>
    <testcase classname="Testing getTagIdsByNameAndValue should catch and throw axios error" name="Testing getTagIdsByNameAndValue should catch and throw axios error" time="0">
    </testcase>
    <testcase classname="Testing getTagIdsByNameAndValue should throw error if tag was not found/undefined" name="Testing getTagIdsByNameAndValue should throw error if tag was not found/undefined" time="0.001">
    </testcase>
    <testcase classname="Testing setTags should return modified count" name="Testing setTags should return modified count" time="0">
    </testcase>
    <testcase classname="Testing setTags should throw error if bad status" name="Testing setTags should throw error if bad status" time="0">
    </testcase>
    <testcase classname="Testing setTagsOnObjects should return modified count" name="Testing setTagsOnObjects should return modified count" time="0">
    </testcase>
  </testsuite>
</testsuites>